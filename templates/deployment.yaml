apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ioc-chart.release" . }}
  labels:
    {{- include "ioc-chart.labels" . | nindent 4 }}

spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ioc-chart.selectorLabels" . | nindent 8 }}
  serviceName: {{ include "ioc-chart.release" . }}
  template:
    metadata:
      labels:
        {{- include "ioc-chart.selectorLabels" . | nindent 8 }}

      annotations:
      {{- range .Values.networks }}
        k8s.v1.cni.cncf.io/networks: {{.annotation}}
      {{- end }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName | quote }}
      {{- end }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- if .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: {{ .Values.hostNetwork }}
      {{- end }}
    {{- if and .Values.gitRepoConfig.url (or (not (hasKey .Values "template")) (empty .Values.template)) }}
      initContainers:
      
      - name: init-container-git
        image: baltig.infn.it:4567/epics-containers/container-init
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
{{ toYaml .Values.securityContext | indent 12 }}
        command:
        - sh
        - -c
        - |
          set -e  # Exit immediately if a command fails
          id=`id`
          cd /pvc
          rm -rf *
          prefix=""
          echo "ID $id cloning: {{ .Values.gitRepoConfig.url }} {{ .Values.gitRepoConfig.path }} revision {{ .Values.gitRepoConfig.branch }} "
          if [ -d temp-config ]; then
            rm -rf temp-config
          fi
          {{- if .Values.epik8s_secrets }}
              # Cloning logic with PAT
              git config --global credential.helper "store --file=/.ssh/git_token"
          {{- else }}
            echo "Cloning repository unauthenticated"
          {{- end }}
         
          if [ -n "{{ .Values.gitRepoConfig.branch }}" ]; then
            git clone --depth 1 -b {{ .Values.gitRepoConfig.branch }} {{ .Values.gitRepoConfig.url }} --recurse-submodules temp-config
          else
            git clone --depth 1 {{ .Values.gitRepoConfig.url }} --recurse-submodules temp-config
          fi
        
          
          if [ -d temp-config/{{ .Values.gitRepoConfig.path }} ]; then
            if [ "{{ .Values.gitRepoConfig.path }}" == "." ]; then
              mv temp-config/* /pvc/
            else
              mv temp-config/{{ .Values.gitRepoConfig.path }}/* /pvc/
              rm -rf temp-config
            fi
          else
            mv temp-config/* /pvc/
          fi
          
          ls /pvc
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: config-volume
          mountPath: /pvc
        - name: config-dump
          mountPath: /etc/config-dump
        {{- if .Values.epik8s_secrets }}
        - name: secrets-volume
          mountPath: /.ssh
          readOnly: true
        {{- end}}
          
      {{- end }}
      terminationGracePeriodSeconds: 5 # nice to have quick restarts on IOCs
      volumes:
      {{- if .Values.epik8s_secrets }}
      - name: secrets-volume
        secret:
          secretName: "{{.Values.epik8s_secrets}}"
          items:
          - key: "id_rsa"
            path: "id_rsa"
            mode: 0400
          - key: "id_rsa.pub"
            path: "id_rsa.pub"
          - key: "git_token"
            path: "git_token"
      {{- end }}
      {{- if .Values.runtimeClaim }}
      - name: runtime-volume
        persistentVolumeClaim:
          claimName: {{ .Values.runtimeClaim }}
      {{- end }}
      {{- if .Values.opisClaim }}
      - name: opis-volume
        persistentVolumeClaim:
          claimName: {{ .Values.opisClaim }}
      {{- end }}
      {{- if .Values.nfsv2TftpClaim }}
      - name: nfsv2-tftp-volume
        persistentVolumeClaim:
          claimName: {{ .Values.nfsv2TftpClaim }}
      {{- end }}
      {{- if .Values.autosaveClaim }}
      - name: autosave-volume
        persistentVolumeClaim:
          claimName: {{ .Values.autosaveClaim }}
      {{- end }}
      {{- if .Values.dataVolume.pvc }}
      - name: data-volume
        persistentVolumeClaim:
          claimName: {{ include "ioc-chart.release" . }}-data
      {{- end }}
      - name: config-volume
        emptyDir: {}
      - name: config-dump
        configMap:
          name: {{ include "ioc-chart.release" . }}
      {{- range .Values.nfsMounts }}
      - name: {{ .name }}
        nfs:
          server: {{ .server }}
          path: {{ .path }}
      {{- end }}
      containers:
      - name: {{ include "ioc-chart.release" . }}
        image: "{{ .Values.image }}:{{.Values.ioc_version}}"
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
{{ toYaml .Values.securityContext | indent 12 }}

{{- if not ( and (hasKey .Values "devtype") (eq .Values.devtype "development") ) }}
        command:
        - sh
        - -c
        - |
          set -e  # Exit immediately if a command fails
          data=`date`
          {{- if .Values.carepeater }}
          echo "Starting caRepeater"
          caRepeater &
          {{- end }}

          {{- if and (.Values.serial.ip) (.Values.serial.port) }}
          echo "opening {{ .Values.serial.ptty }},raw,echo=0,b{{ .Values.serial.baud }} tcp:{{ .Values.serial.ip }}:{{ .Values.serial.port }}"
          socat pty,link={{ .Values.serial.ptty }},raw,echo=0,b{{ .Values.serial.baud }} tcp:{{ .Values.serial.ip }}:{{ .Values.serial.port }} &
          sleep 1
          if [ -e {{ .Values.serial.ptty }} ]; then
            echo "tty {{ .Values.serial.ptty }}"
          else
            echo "## failed tty {{ .Values.serial.ptty }} "
            exit 1
          fi
          {{- end }}

          echo "=== configuration yaml ======="
          cat /etc/config-dump/config.yaml 
          echo "=============================="
        
          {{- if and (hasKey .Values "template") (not (empty .Values.template)) }}
          {{- if and (hasKey .Values "host") (not (empty .Values.host)) }}
          ## running on remote host
          {{- if .Values.python_env }}
          python -m venv /epics/support/venv
          . /epics/support/venv/bin/activate
          pip install epik8s-tools
          {{- end }}
          mkdir ~/.ssh
          cp /.ssh/id_rsa* ~/.ssh/
          chmod 400 -R ~/.ssh/id_rsa
          epik8s-run /etc/config-dump/config.yaml {{.Values.iocname }} --workdir /tmp --native --configdir {{ .Values.iocConfig }}
          exit $?
          {{- else}}
          echo "* using ibek template {{ .Values.template }}"
          jnjrender  /epics/support/templates/ /etc/config-dump/config.yaml --auto --output {{ .Values.iocConfig }}
          {{- end }}
          {{- else}}

          echo "* copy ioc config and replace any .j2 with rendered values"
          find {{ .Values.iocConfig }} -name "*.j2" -exec sh -c 'jnjrender "$1" /etc/config-dump/config.yaml --output "${1%.j2}"' _ {} \;
          {{- end}}

          {{- range .Values.nfsMounts }}
          mkdir -p {{ .mountPath }}/{{ $.Values.iocname }} || true
          {{- if eq .name "config" }}
          cp -r {{ $.Values.iocConfig }}/* {{ .mountPath }}/{{ $.Values.iocname }}/
          if [ -d /epics/ioc/runtime ]; then
            echo "Copying runtime files to {{ .mountPath }}/{{ $.Values.iocname }}/"
            cp -r /epics/ioc/runtime {{ .mountPath }}/{{ $.Values.iocname }}/
          fi
          echo "Start Date: $data" > {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          if [ -e /BUILD_INFO.txt ]; then
            cat /BUILD_INFO.txt
            cat /BUILD_INFO.txt >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          else
            echo "No BUILD_INFO.txt found" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          fi
          {{- if hasKey $.Values "iocname" }}
          echo "IOC Name: {{ $.Values.iocname }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- if hasKey $.Values "asset" }}
          echo "IOC Asset: {{ $.Values.asset }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- if hasKey $.Values "template" }}
          echo "IOC Template: {{ $.Values.template }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- if hasKey $.Values "devtype" }}
          echo "IOC Device Type: {{ $.Values.devtype }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- if hasKey $.Values "devgroup" }}
          echo "IOC Device Group: {{ $.Values.devgroup }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- if hasKey $.Values "iocprefix" }}
          echo "IOC Prefix: {{ $.Values.iocprefix }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- if hasKey $.Values "ioc_version" }}
          echo "IOC Version: {{ $.Values.ioc_version }}" >> {{ .mountPath }}/{{ $.Values.iocname }}/start.log
          {{- end }}
          {{- end }}
          {{- end }}
          
          cd {{ .Values.iocConfig }}
          ls -latr
          if [ -x ./start.sh ];then
          ./start.sh
          else
          {{- if .Values.start }}
          export PATH="$PATH:$PWD"
          {{ .Values.start }}
          fi
          
          {{- end }}
{{- end }}
    
        ports:
{{- if and (hasKey .Values "devtype") (eq .Values.devtype "development") }}
        - containerPort: 22
          name: ssh
{{- end }}

        - containerPort: {{ .Values.ca_server_port | default 5064 }}
        - containerPort: {{ add1 (.Values.ca_server_port | default 5064) }}
        - containerPort: {{ .Values.pva_server_port | default 5075 }}
        - containerPort: {{ add1 (.Values.pva_broadcast_port | default 5075) }}
        {{- if hasKey .Values.service "port" }}
        - containerPort: {{ .Values.service.port }}
          name: rest
        {{- end }}

        {{- if .Values.service.http.enable }}
        - containerPort: {{ .Values.service.http.port }}
          name: http
        {{- end }}
        {{- if .Values.liveness }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - {{ .Values.liveness }}
          initialDelaySeconds: 120
          periodSeconds: 10
        {{- end }}
        {{- if .Values.stop }}
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "{{ .Values.stop }}"]
        {{- end }}
        
        volumeMounts:
        - name: config-volume
          mountPath: {{ .Values.iocConfig }}
        {{- if .Values.epik8s_secrets }}
        - name: secrets-volume
          mountPath: /.ssh
        {{- end}}
        {{- if .Values.autosaveClaim }}
        - name: autosave-volume
          mountPath: /autosave
        {{- end }}
        - name: config-dump
          mountPath: /etc/config-dump
        {{- if .Values.dataVolume.pvc }}
        - name: data-volume
          mountPath: {{ .Values.dataVolume.hostPath }}
          {{- if .Values.dataVolume.hostPath }}
          mountPropagation: HostToContainer
          {{- end }}
        {{- end }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          mountPath: /nfsv2-tftp
          subPath: "{{ .Values.beamline }}/{{ include "ioc-chart.release" . }}"
        {{- end }}
        {{- if .Values.runtimeClaim }}
        - name: runtime-volume
          mountPath: /epics/runtime
          subPath: "{{ include "ioc-chart.release" . }}"
        {{- end }}
        {{- if .Values.opisClaim }}
        - name: opis-volume
          mountPath: /epics/opi
          subPath: "{{ include "ioc-chart.release" . }}"
        {{- end }}
        {{- range .Values.nfsMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
        {{- end }}
        stdin: true
        tty: true
        imagePullPolicy: {{ .Values.imagePullPolicy}}
        {{- if .Values.epicsConfiguration.name }}
        envFrom:
        - configMapRef:
            name: {{ .Values.epicsConfiguration.name }}
        {{- end }}
        env:
        {{- range .Values.nfsMounts }}
        - name: {{ .name | upper }}_SERVER
          value: {{ .server | quote }}
        - name: {{ .name | upper }}_SERVER_PATH
          value: {{ .path | quote }}
        - name: {{ .name | upper }}_DIR
          value: {{ .mountPath | quote }}
        {{- end }}
        - name: IOCSH_PS1
          value: "{{ include "ioc-chart.release" . }} > "
        - name: IOC_NAME
          value: {{ .Values.iocname | quote }}
        - name: IOC_PREFIX
          value: {{ .Values.iocprefix | quote }}
        - name: IOC_VERSION
          value: {{ .Values.ioc_version | quote }}
        {{- if .Values.epicsConfiguration.gateway }}
        - name: EPICS_CA_ADDR_LIST
          value: {{ .Values.epicsConfiguration.gateway | quote }}
        - name: EPICS_CA_AUTO_ADDR_LIST
          value: "NO"
        {{- end }}
        {{- range $envVar := .Values.env }}
        - name: {{ $envVar.name }}
          value: {{ $envVar.value | quote }}
        {{- end }}
        {{- range $envVar := .Values.globalenv }}
        - name: {{ $envVar.name }}
          value: {{ $envVar.value | quote }}
        {{- end }}
{{- if or 
    (gt (len (default (list) .Values.runon)) 0) 
    (gt (len (default (list) .Values.networks)) 0) 
}}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- range .Values.runon }}
              - key: {{.name}}
                operator: In
                values:
                - {{.annotation}}
              {{- end }}
              {{- range .Values.networks }}
              - key: {{.name}}
                operator: In
                values:
                - {{.annotation}}
              {{- end }}
      {{- end }}
      tolerations:
      - key: nodetype
        operator: Equal
        value: {{ .Values.beamline }}
        effect: NoSchedule
    {{- if .Values.networks }}
    {{- range .Values.networks }}
      - key: {{.name}}
        operator: Equal
        value: {{.annotation}}
        effect: NoSchedule
    {{- end }}
    {{- end }}

  volumeClaimTemplates:
    {{- if .Values.runtimeClaim }}
    - metadata:
        name: runtime-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    {{- if .Values.opisClaim }}
    - metadata:
        name: opis-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    {{- if .Values.nfsv2TftpClaim }}
    - metadata:
        name: nfsv2-tftp-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    
    {{- if .Values.dataVolume.pvc }}
    - metadata:
        name: data-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    # {{- if .Values.gitRepoConfig.url }}
    # - metadata:
    #     name: config-volume
    #   spec:
    #     accessModes: ["ReadWriteOnce"]
    #     resources:
    #       requests:
    #         storage: 1Gi
    # {{- end }}
