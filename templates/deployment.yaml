apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ioc-chart.release" . }}
  labels:
    {{- include "ioc-chart.labels" . | nindent 4 }}

spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "ioc-chart.selectorLabels" . | nindent 8 }}
  serviceName: {{ include "ioc-chart.release" . }}
  template:
    metadata:
      labels:
        {{- include "ioc-chart.selectorLabels" . | nindent 8 }}

{{- range .Values.networks }}
      annotations:
        k8s.v1.cni.cncf.io/networks: {{.annotation}}
{{- end }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName | quote }}
      {{- end }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- if .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: {{ .Values.hostNetwork }}
      {{- end }}
      {{- if .Values.gitRepoConfig.url }}
      initContainers:
      
      - name: init-container-git
        image: baltig.infn.it:4567/epics-containers/container-init
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
{{ toYaml .Values.securityContext | indent 12 }}
        command:
        - sh
        - -c
        - |
          id=`id`
          cd /pvc
          rm -rf *
          prefix=""
          echo "#!/bin/sh" > k8sreplace.sh
          chmod +x k8sreplace.sh
          echo 'sed -i "s|__IOC_TOP__|{{ .Values.iocConfig }}|g" $1' >> k8sreplace.sh
          
          {{- if .Values.iocprefix }}
          echo 'sed -i "s|__IOC_PREFIX__|{{ .Values.iocprefix }}|g" $1' >> k8sreplace.sh
          prefix="{{ .Values.iocprefix }}"
          {{- end }}

          {{- if .Values.iocroot }}
          prefix="$prefix:{{ .Values.iocroot }}"

          echo 'sed -i "s|__IOC_ROOT__|{{ .Values.iocroot }}|g" $1' >> k8sreplace.sh
          {{- end }}

          {{- if .Values.iocname }}
          echo 'sed -i "s|__IOC_NAME__|{{ .Values.iocname }}|g" $1' >> k8sreplace.sh
          {{- end }}

          {{- if .Values.nfsMounts }}
            {{- range .Values.nfsMounts }}
            echo 'sed -i "s|__{{ .name | upper }}_DIR__|{{ .mountPath }}/{{ $.Values.iocname }}|g" $1' >> k8sreplace.sh
            {{- end }}
          {{- else }}
              echo 'sed -i "s|__CONFIG_DIR__|/tmp|g" $1' >> k8sreplace.sh
          {{- end }}

          # {{- range .Values.iocparam }}
          # echo 'sed -i "s|{{ .name }}|{{ .value }}|g" $1' >> k8sreplace.sh
          # {{- end }}
          echo "ID $id cloning: {{ .Values.gitRepoConfig.url }} {{ .Values.gitRepoConfig.path }} revision {{ .Values.gitRepoConfig.branch }} "
          echo "* applying substitutions "`cat /pvc/k8sreplace.sh`

          if [ -d temp-config ]; then
            rm -rf temp-config
          fi
          # Cloning logic with PAT
          if [ -n "{{ .Values.gitRepoConfig.token }}" ]; then
            echo "Cloning repository using Personal Access Token"
            if [ -n "{{ .Values.gitRepoConfig.branch }}" ]; then
              git clone --depth 1 -b {{ .Values.gitRepoConfig.branch }} https://oauth2:{{ .Values.gitRepoConfig.token }}@{{ .Values.gitRepoConfig.url | replace "https://" "" }} --recurse-submodules temp-config
            else
              git clone --depth 1 https://oauth2:{{ .Values.gitRepoConfig.token }}@{{ .Values.gitRepoConfig.url | replace "https://" "" }} --recurse-submodules temp-config
            fi
          else
            echo "Cloning repository unauthenticated"
            if [ -n "{{ .Values.gitRepoConfig.branch }}" ]; then
              git clone --depth 1 -b {{ .Values.gitRepoConfig.branch }} {{ .Values.gitRepoConfig.url }} --recurse-submodules temp-config
            else
              git clone --depth 1 {{ .Values.gitRepoConfig.url }} --recurse-submodules temp-config
            fi
          fi
          
          if [ -d temp-config/{{ .Values.gitRepoConfig.path }} ]; then
            if [ "{{ .Values.gitRepoConfig.path }}" == "." ]; then
              find temp-config/ -type f ! -name "*.j2" -exec /pvc/k8sreplace.sh {} \;
              mv temp-config/* /pvc/
            else
              find temp-config/{{ .Values.gitRepoConfig.path }} -type f ! -name "*.j2" -exec /pvc/k8sreplace.sh {} \;
              mv temp-config/{{ .Values.gitRepoConfig.path }}/* /pvc/
              rm -rf temp-config
            fi
          else
            mv temp-config/* /pvc/
          fi
          echo "## Intialization $prefix `date`" > init.cmd
          {{- range .Values.iocinit }}
          echo "dbpf(\"$prefix:{{.name}}\",\"{{.value}}\")" >> init.cmd
          {{- end }}
          
          # chmod a+w,a+r -R /pvc
          ls /pvc
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: config-volume
          mountPath: /pvc
        - name: config-dump
          mountPath: /etc/config-dump
          
      {{- end }}
      terminationGracePeriodSeconds: 5 # nice to have quick restarts on IOCs
      volumes:
      {{- if .Values.runtimeClaim }}
      - name: runtime-volume
        persistentVolumeClaim:
          claimName: {{ .Values.runtimeClaim }}
      {{- end }}
      {{- if .Values.opisClaim }}
      - name: opis-volume
        persistentVolumeClaim:
          claimName: {{ .Values.opisClaim }}
      {{- end }}
      {{- if .Values.nfsv2TftpClaim }}
      - name: nfsv2-tftp-volume
        persistentVolumeClaim:
          claimName: {{ .Values.nfsv2TftpClaim }}
      {{- end }}
      - name: autosave-volume
        persistentVolumeClaim:
          {{- if .Values.autosave }}
          claimName: {{ .Values.autosave }}
          {{- else }}
          claimName: {{ include "ioc-chart.release" . }}-autosave
          {{- end }}
      {{- if .Values.dataVolume.pvc }}
      - name: data-volume
        persistentVolumeClaim:
          claimName: {{ include "ioc-chart.release" . }}-data
      {{- end }}
      {{- if .Values.gitRepoConfig.url }}
      - name: config-volume
          emptyDir: {}
      {{- end }}
      - name: config-dump
        configMap:
          name: {{ include "ioc-chart.release" . }}
      {{- range .Values.nfsMounts }}
      - name: {{ .name }}
        nfs:
          server: {{ .server }}
          path: {{ .path }}
      {{- end }}
      containers:
      - name: {{ include "ioc-chart.release" . }}
        image: {{ .Values.image }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
{{ toYaml .Values.securityContext | indent 12 }}
        command:
        - sh
        - -c
        - |
          {{- if .Values.carepeater }}
          echo "Starting caRepeater"
          caRepeater &
          {{- end }}
          {{- range .Values.nfsMounts }}
          mkdir -p {{ .mountPath }}/{{ $.Values.iocname }}
          {{- end }}
          {{- if and (.Values.serial.ip) (.Values.serial.port) }}
          echo "opening {{ .Values.serial.ptty }},raw,echo=0,b{{ .Values.serial.baud }} tcp:{{ .Values.serial.ip }}:{{ .Values.serial.port }}"
          socat pty,link={{ .Values.serial.ptty }},raw,echo=0,b{{ .Values.serial.baud }} tcp:{{ .Values.serial.ip }}:{{ .Values.serial.port }} &
          sleep 1
          if [ -e {{ .Values.serial.ptty }} ]; then
            echo "tty {{ .Values.serial.ptty }}"
          else
            echo "## failed tty {{ .Values.serial.ptty }} "
            exit 1
          fi
          {{- end }}
          echo "* copy ioc config and replace any .j2 with rendered values"
          find {{ .Values.iocConfig }} -name "*.j2" -exec sh -c 'jnjrender "$1" /etc/config-dump/config.yaml --output "${1%.j2}.yaml"' _ {} \;
        
          {{- if .Values.start }}
          {{ .Values.start }}
          {{- end }}
        ports:
        
        - containerPort: {{ .Values.ca_server_port | default 5064 }}
        - containerPort: {{ add1 (.Values.ca_server_port | default 5064) }}
        - containerPort: {{ .Values.pva_server_port | default 5075 }}
        - containerPort: {{ add1 (.Values.pva_broadcast_port | default 5075) }}
        {{- if .Values.liveness }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - {{ .Values.liveness }}
          initialDelaySeconds: 120
          periodSeconds: 10
        {{- end }}
        {{- if .Values.stop }}
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "{{ .Values.stop }}"]
        {{- end }}
        
        volumeMounts:
        - name: config-volume
          mountPath: {{ .Values.iocConfig }}
        {{- if .Values.autosave }}
        - name: autosave-volume
          mountPath: /autosave
        {{- end }}
        - name: config-dump
          mountPath: /etc/config-dump
        {{- if .Values.dataVolume.pvc }}
        - name: data-volume
          mountPath: {{ .Values.dataVolume.hostPath }}
          {{- if .Values.dataVolume.hostPath }}
          mountPropagation: HostToContainer
          {{- end }}
        {{- end }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          mountPath: /nfsv2-tftp
          subPath: "{{ .Values.beamline }}/{{ include "ioc-chart.release" . }}"
        {{- end }}
        {{- if .Values.runtimeClaim }}
        - name: runtime-volume
          mountPath: /epics/runtime
          subPath: "{{ include "ioc-chart.release" . }}"
        {{- end }}
        {{- if .Values.opisClaim }}
        - name: opis-volume
          mountPath: /epics/opi
          subPath: "{{ include "ioc-chart.release" . }}"
        {{- end }}
        {{- range .Values.nfsMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
        {{- end }}
        stdin: true
        tty: true
        imagePullPolicy: {{ .Values.imagePullPolicy}}
        {{- if .Values.epicsConfiguration.name }}
        envFrom:
        - configMapRef:
            name: {{ .Values.epicsConfiguration.name }}
        {{- end }}
        env:
        {{- range .Values.nfsMounts }}
        - name: {{ .name | upper }}_SERVER
          value: {{ .server | quote }}
        - name: {{ .name | upper }}_SERVER_PATH
          value: {{ .path | quote }}
        - name: {{ .name | upper }}_DIR
          value: {{ .mountPath | quote }}
        {{- end }}
        - name: IOCSH_PS1
          value: "{{ include "ioc-chart.release" . }} > "
        - name: IOC_NAME
          value: {{ .Values.iocname | quote }}
        - name: IOC_PREFIX
          value: {{ .Values.iocprefix | quote }}
        - name: IOC_VERSION
          value: {{ .Values.ioc_version | quote }}
        {{- if .Values.epicsConfiguration.gateway }}
        - name: EPICS_CA_ADDR_LIST
          value: {{ .Values.epicsConfiguration.gateway | quote }}
        - name: EPICS_CA_AUTO_ADDR_LIST
          value: "NO"
        {{- end }}
        {{- range $envVar := .Values.env }}
        - name: {{ $envVar.name }}
          value: {{ $envVar.value | quote }}
        {{- end }}
        {{- range $envVar := .Values.globalenv }}
        - name: {{ $envVar.name }}
          value: {{ $envVar.value | quote }}
        {{- end }}
      {{- if and (.Values.useAffinity) (.Values.affinityKey) }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: {{.Values.affinityKey}}
                operator: In
                values:
                - {{ .Values.affinityValue }}
      {{- end }}
      tolerations:
      - key: nodetype
        operator: Equal
        value: {{ .Values.beamline }}
        effect: NoSchedule
  volumeClaimTemplates:
    {{- if .Values.runtimeClaim }}
    - metadata:
        name: runtime-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    {{- if .Values.opisClaim }}
    - metadata:
        name: opis-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    {{- if .Values.nfsv2TftpClaim }}
    - metadata:
        name: nfsv2-tftp-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    - metadata:
        name: autosave-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- if .Values.dataVolume.pvc }}
    - metadata:
        name: data-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    {{- end }}
    # {{- if .Values.gitRepoConfig.url }}
    # - metadata:
    #     name: config-volume
    #   spec:
    #     accessModes: ["ReadWriteOnce"]
    #     resources:
    #       requests:
    #         storage: 1Gi
    # {{- end }}
